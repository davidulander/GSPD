import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.io.FileNotFoundException;  
import java.io.FileReader;  
import java.io.IOException;  
import java.util.Iterator;  
import org.json.simple.JSONArray;  
import org.json.simple.JSONObject;  
import org.json.simple.parser.JSONParser;  
import org.json.simple.parser.ParseException; 

import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

public class Messages {

	private static Socket outgoing;
	private static ServerSocket incoming;
	
	public static void main(String[] args) throws UnknownHostException, IOException, ParseException{
		
		incoming = new ServerSocket(1885);
		
		JSONParser parser = new JSONParser();
		Object obj = parser.parse(new FileReader("/Users/jocke/Desktop/GSPD/objects.json"));
		JSONObject jsonObject = (JSONObject) obj;
		
		JSONParser parser2 = new JSONParser();
		Object obj2 = parser.parse(new FileReader("/Users/jocke/Desktop/GSPD/data.json"));
		JSONObject jsonObject2 = (JSONObject) obj2;
		
		while(true){
		Socket s = incoming.accept();	
		DataInputStream in = new DataInputStream(s.getInputStream());
		int question = in.readInt();
		
		outgoing = new Socket("169.254.21.49", 5556);
		DataOutputStream out = new DataOutputStream(outgoing.getOutputStream());
		
		if(question==0){	
			
			int green = Integer.parseInt((String) jsonObject.get("Green"));
			int red = Integer.parseInt((String) jsonObject.get("Red"));	
			/*int white = (Integer) jsonObject.get("White");
			if(white)*/
			int yellow = Integer.parseInt((String) jsonObject.get("Yellow"));
			
			if(green==1) out.writeInt(1);
			if(red==1) out.writeInt(0);
			if(yellow==1) out.writeInt(3);
			if(green<1 && red<1 && yellow<1) out.write(-1); 
			//System.out.println("Green: " + green +" Red: " + red +" Yellow: " + yellow );
			jsonObject.put("Green",  Integer.toString(green-1));
			jsonObject.put("Red", Integer.toString(red-1));
			//jsonObject.put("White", (Integer) jsonObject.get("White")-1);
			jsonObject.put("Yellow", Integer.toString(yellow-1));
		}
		
		if(question==1){
			  
			String temperature = (String) jsonObject2.get("Temperature");
			String uv = (String) jsonObject2.get("UV");			
			
			String topic = "myfirst/test";
		    String content = str;
		    int qos = 0;
		    //Connect to broker which is located on my laptop, change for your IP which is know to the robot if you wnat to try out
		    String broker = "tcp://169.254.136.26:1883";
		    String clientId = "Robot";
		    MemoryPersistence persistence = new MemoryPersistence();

		    try {
		        MqttClient sampleClient = new MqttClient(broker, clientId, persistence);
		        MqttConnectOptions connOpts = new MqttConnectOptions();
		        connOpts.setCleanSession(true);
		        sampleClient.connect(connOpts);
		        MqttMessage message = new MqttMessage(content.getBytes());
		        message.setQos(qos);
		        sampleClient.publish(topic, message);
		        sampleClient.disconnect();
		    } catch(MqttException me) {
		        System.out.println("reason "+me.getReasonCode());
		        System.out.println("msg "+me.getMessage());
		        System.out.println("loc "+me.getLocalizedMessage());
		        System.out.println("cause "+me.getCause());
		        System.out.println("excep "+me);
		        me.printStackTrace();
		    }
			
			//out.writeInt(0);
			}
		}	
	}
}